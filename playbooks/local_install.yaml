# Copyright (c) 2025, Sine Nomine Associates
#
# This playbook sets up a local OpenAFS sandbox cell for testing and
# development.  It creates a Kerberos realm called "EXAMPLE.COM" and OpenAFS
# cell called "example.com" on the local machine. This playbook is intended for
# testing purposes only.
#
# Kerberos:
# * Installs a Kerberos KDC and creates a realm called EXAMPLE.COM.
# * Installs the Kerberos client and configuration.
# * Creates the Kerberos service key the OpenAFS cell.
# * Creates the Kerberos principals for the OpenAFS admin and regular user.
# * Creates keytabs for the service key and user principals and
#   places keytabs in the $HOME/keytabs directory.
#
# OpenAFS:
# * Installs the OpenAFS database server.
# * Installs the OpenAFS fileserver.
# * Installs the OpenAFS client, including the OpenAFS kernel module.
# * Sets up the server configuration to create the example.com cell.
# * Creates the admin and regular OpenAFS users.
# * Creates the top-level root.afs and root.cell volumes.
# * Creates a top-level test volume.
#
# Prerequisites
# -------------
#
# - sudo privileges
# - Ansible
# - OpenAFS Ansible Collection (openafs_contrib.openafs)
#
# Be sure your system is up to date, for example:
#
#   $ sudo apt update -y && $ sudo apt upgrade -y && sudo reboot
#
# Install Ansible core and community with pipx.
#
#   $ pipx install ansible ansible-core
#
# Install the OpenAFS Ansible collection with ansible-galaxy.
#
#   $ ansible-galaxy collection install openafs_contrib.openafs
#
# Running
# -------
#
#   $ ansible-playbook openafs_contrib.openafs.local_cell
#
# Specify one or more --extra (-e) options to override the defaults
# in the vars section of this playbook.
#
#
- name: Create an OpenAFS sandbox cell for testing.
  hosts: localhost
  connection: local
  vars:
    # This local machine will be both the client and the server.
    afs_is_client: true
    afs_is_server: true
    afs_is_dbserver: true
    afs_is_fileserver: true

    # The following variables specify how to install OpenAFS.
    # Use the ansible-playbook --extra-vars (-e) option to specify different values.
    # See the OpenAFS Ansible Collection documentation for valid values.
    afs_install_method: "managed"
    afs_module_install_method: "dkms"
    afs_git_repo: "https://github.com/openafs/openafs"
    afs_git_version: "master"
    afs_configure_options: "--enable-debug --enable-kernel-module --with-linux-kernel-packaging"

    # The following variables specify the cell and user names.
    # Use the ansible-playbook --extra-vars (-e) option to specify different values.
    afs_cell: example.com
    afs_realm: EXAMPLE.COM
    afs_admin: admin
    afs_user: "{{ lookup('ansible.builtin.env', 'USER') | d('dexter', True) }}"
    afs_user_id: 1000

    # The following variable sets the OpenAFS CellServDB file for the server and clients.
    afs_csdb:
      cell: "{{ afs_cell }}"
      desc: Example cell for testing
      hosts:
        - ip: "{{ afs_server_netinfo | d(ansible_default_ipv4.address) }}"
          name: "{{ ansible_hostname }}"
          clone: false

    # The following variables specify the paths for generated files.
    # Use the ansible-playbook --extra-vars (-e) option to specify different locations.
    keytabs: "{{ lookup('ansible.builtin.env', 'HOME') }}/keytabs"
    settings: "{{ playbook_dir | dirname }}/settings"

  tasks:
    - name: Get last checkpoint.
      ansible.builtin.set_fact:
        checkpoint: "{{ checkpoint | d(ansible_local.local_install.checkpoint) | d(0) }}"

    - name: Print playbook parameters.
      ansible.builtin.debug:
        msg:
          - "checkpoint: {{ checkpoint }}"
          - "afs_cell: {{ afs_cell }}"
          - "afs_realm: {{ afs_realm }}"
          - "afs_admin: {{ afs_admin }}"
          - "afs_user: {{ afs_user }}"
          - "afs_user_id: {{ afs_user_id }}"
          - "afs_csdb: {{ afs_csdb }}"
          - "keytabs: {{ keytabs }}"

    #
    # Setup the Kerberos realm and create the principals on this
    # local machine.
    #
    - name: Checkpoint 1
      when: (checkpoint | int) < 1
      block:
        - name: Create the Kerberos realm.
          ansible.builtin.include_role:
            name: openafs_contrib.openafs.openafs_krbserver

        - name: Install the Kerberos client programs.
          ansible.builtin.include_role:
            name: openafs_contrib.openafs.openafs_krbclient

        - name: Create the Kerberos service key.
          become: true
          openafs_contrib.openafs.openafs_principal:
            state: present
            principal: "afs/{{ afs_cell }}"
            encryption_types: ['aes128-cts', 'aes256-cts']
            keytabs: "{{ keytabs }}"
          register: service_key_results

        - name: Create the Kerberos principal for the OpenAFS administrator.
          become: true
          openafs_contrib.openafs.openafs_principal:
            state: present
            principal: "{{ afs_admin }}"
            acl: "*"
            keytabs: "{{ keytabs }}"
          register: admin_princ_results

        - name: Create the Kerberos user principal.
          become: true
          openafs_contrib.openafs.openafs_principal:
            state: present
            principal: "{{ afs_user }}"
            keytabs: "{{ keytabs }}"
          register: user_princ_results

        - name: Set keytab variables.
          ansible.builtin.set_fact:
            keytab_service: "{{ service_key_results.keytab }}"
            keytab_admin: "{{ admin_princ_results.keytab }}"
            keytab_user: "{{ user_princ_results.keytab }}"

        - name: Set file permissions on keytabs.
          become: true
          ansible.builtin.file:
            state: touch
            path: "{{ item.path }}"
            mode: "{{ item.mode }}"
            owner: "{{ afs_user }}"
          loop:
            - path: "{{ keytabs }}"
              mode: "0700"
            - path: "{{ keytab_service }}"
              mode: "0600"
            - path: "{{ keytab_admin }}"
              mode: "0600"
            - path: "{{ keytab_user }}"
              mode: "0600"
          when: service_key_results.changed or admin_princ_results.changed or user_princ_results.changed

        - name: Save keytab names
          become: true
          openafs_contrib.openafs.openafs_store_facts:
            state: update
            facts:
              local_install:
                keytab_service: "{{ keytab_service }}"
                keytab_admin: "{{ keytab_admin }}"

        - name: Save checkpoint 1
          become: true
          ansible.builtin.copy:
            content: '{"checkpoint": 1}'
            dest: /etc/ansible/facts.d/local_install.fact
            owner: root
            group: root
            mode: "0644"

        - name: Set checkpoint 1
          ansible.builtin.set_fact:
            checkpoint: 1

    #
    # Install the OpenAFS server and client packages and create the
    # example cell on this local machine.
    #
    - name: Checkpoint 2
      when: (checkpoint | int) < 2
      block:
        - name: Install OpenAFS database and file servers.
          vars:
            afs_service_keytab: "{{ keytab_service | d(ansible_local.openafs.local_install.keytab_service) }}"
            afs_pseudo_partitions: ["a", "b", "c"]
          ansible.builtin.include_role:
            name: openafs_contrib.openafs.openafs_server

        - name: Save checkpoint 2
          become: true
          ansible.builtin.copy:
            content: '{"checkpoint": 2}'
            dest: /etc/ansible/facts.d/local_install.fact
            owner: root
            group: root
            mode: "0644"

        - name: Set checkpoint 2
          ansible.builtin.set_fact:
            checkpoint: 2


    - name: Checkpoint 3
      when: (checkpoint | int) < 3
      block:
        - name: Install OpenAFS client.
          ansible.builtin.include_role:
            name: openafs_contrib.openafs.openafs_client

        - name: Save checkpoint 3
          become: true
          ansible.builtin.copy:
            content: '{"checkpoint": 3}'
            dest: /etc/ansible/facts.d/local_install.fact
            owner: root
            group: root
            mode: "0644"

        - name: Set checkpoint 3
          ansible.builtin.set_fact:
            checkpoint: 3


    - name: Checkpoint 4
      when: (checkpoint | int) < 4
      block:
        - name: Create the OpenAFS top level cell volumes.
          openafs_contrib.openafs.openafs_volume:
            state: present
            name: "{{ item.name }}"
            mount: "{{ item.mount }}"
            acl: "{{ item.acl }}"
            auth_user: "{{ afs_admin }}"
            auth_keytab: "{{ keytab_admin | d(ansible_local.openafs.local_install.keytab_admin) }}"
            replicas: 3
          loop:
            - name: root.afs
              mount: /afs
              acl: "system:anyuser read"
            - name: root.cell
              mount: "/afs/{{ afs_cell }}"
              acl: "system:anyuser read"
            - name: test
              mount: "/afs/{{ afs_cell }}/test"
              acl:
                - "system:anyuser read"
                - "system:authuser write"

        - name: Create the OpenAFS regular user.
          openafs_contrib.openafs.openafs_user:
            name: "{{ afs_user }}"
            id: "{{ afs_user_id | int }}"
            group: testers
            auth_user: "{{ afs_admin }}"
            auth_keytab: "{{ keytab_admin | d(ansible_local.openafs.local_install.keytab_admin) }}"

        - name: Save checkpoint 4
          become: true
          ansible.builtin.copy:
            content: '{"checkpoint": 4}'
            dest: /etc/ansible/facts.d/local_install.fact
            owner: root
            group: root
            mode: "0644"

        - name: Set checkpoint 4
          ansible.builtin.set_fact:
            checkpoint: 4

    - name: Completed.
      ansible.builtin.debug:
        msg: OpenAFS cell setup completed.
