---
dependency:
  name: galaxy
platforms:
  - name: m-playbook-realm${AFS_TESTID}
    box: "${AFS_IMAGE:-generic/centos7}"
    groups:
      - afs_kdcs
provisioner:
  name: ansible
  env:
    ANSIBLE_PIPELINING: "True"
    ANSIBLE_STDOUT_CALLBACK: "yaml"
  inventory:
    group_vars:
      all:
        afs_realm: "EXAMPLE.COM"
        afs_cell: "example.com"
        afs_cell_files: "${MOLECULE_EPHEMERAL_DIRECTORY}"
        afs_builds: "${AFS_BUILDS:-~/.cache/ansible-openafs/builds}"
        afs_csdb_file: "${MOLECULE_EPHEMERAL_DIRECTORY}/csdb.yaml"
        afs_git_repo: "${AFS_GIT_REPO:-git://git.openafs.org/openafs.git}"
        afs_git_version: "${AFS_GIT_VERSION:-master}"
        afs_install_archive: "${AFS_INSTALL_ARCHIVE}"
        afs_install_method: "managed"
        afs_module_install_method: "dkms"
        afs_pseudo_partitions: ['a', 'b']
        #afs_service_keytab: "../__files__/example-aes.keytab"
verifier:
  name: ansible
scenario:
  create_sequence:
    - create
    - prepare
  check_sequence:
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - check
    - destroy
  converge_sequence:
    - create
    - prepare
    - converge
  destroy_sequence:
    - cleanup
    - destroy
  test_sequence:
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - verify
    - cleanup
    - destroy
